Chater 14 Testing

    14.1 Unit testing and sub-tests

        Criar um teste unitário para a função humanDate() garantindo que a saída de time.Time
        será conforme esperado.

            func humanDate(t time.Time) string {
                return t.UTC().Format("02 Jan 2006 at 15:04")
            }
        
        Creating a unit test

            A pratica padrão é criaar arquivos *_test.go diratemente ao lado do código que está sendo testado.
            Este padrão é o mais basico e será usado em quase todos os testes escritos em go.
                
                - O teste é um código comum escrito em Go que ivocará humanDate()
                  e verificará se o resultado é o esperado

                - Os testes são criados dentro de funções Go com assinatura func(*testing.T).

                - Para ser um teste válido a função deve começar com a palavra Test.
                  Tipicamente 'Test' é seguido do nome da função.
                
                - Usar t.Errorf() para indicar que o teste falhou e imprimir uma mensagem de log descritiva sobre a falha.

            Criar o arquivo cmd/web/templates_test.go.
            Executar o teste:
                go test ./cmd/web
        
        Table-driven tests

            Estender TestHumanDate() para que cubra outros casos.
                - Se a entrada do usuário for zero time(https://pkg.go.dev/time#Time.IsZero), então ele deve retornar uma string vazia.
                - O output de humanDate() sempre deve estar em UTC time zone.
            
            Em Go, Table-driven é uma maneira idiomática de executar vários testes.
            A ideia por trás disso é criar uma tabela de casos de teste contendo as INPUTS e EXPECTED OUTPUTS
            e então realizar um loop sob esta tabela executando os casos de testes em sub-tests.

                func TestHumanDate(t *testing.T) {
                    tests := []struct {
                        name string
                        tm   time.Time
                        want string
                    }{
                        {
                            name: "UTC",
                            tm:   time.Date(2022, 3, 17, 10, 15, 0, 0, time.UTC),
                            want: "17 Mar 2022 at 10:15",
                        },
                    }

                    for _, tt := range tests {
                        t.Run(tt.name, func(t *testing.T) {
                            hd := humanDate(tt.tm)

                            if hd != tt.want {
                                t.Errorf("got %q; want %q", hd, tt.want)
                            }
                        })
                    }
                }

        Helpers for test assertions

            Serão escritas diversas asserções para os testes que serão variações deste padrão:

                if actualValue != expectedValue {
                    t.Errorf("got %v; want %v", actualValue, expectedValue)
                }

            Será feita uma abstração deste código em uma helper function.
            Criar o arquivo internal/assert/assert.go.

                func Equal[T comparable](t *testing.T, actual, expected T) {
                    // Helper marks the calling function as a test helper function.
                    t.Helper()

                    if actual != expected {
                        t.Errorf("got: %v; want: %v", actual, expected)
                    }
                }

                A chamada t.Helper() indica para o test runner do Go que Equal() é um helper dos testes.
                Isso significa que quando t.Errorf() for invocado dentro de Equal() o test runner vai
                reportar o nome do arquivo e a linha do código que invocou Equal() na saída.

            O uso de generics em Equal() torna possível usa-lo independente do tipo que expected e actual são.
            Desde que expected e actual sejam do mesmo tipo.
        
        Additional Information

            Sub-tests without a table of test case
                
                É importante ressaltar que você não precisa usar subtestes em conjunto com table-driven-tests.
                É comletamente válido executar sub-tests invocando t.Run().

                    func TestExample(t *testing.T) {
                        t.Run("Example sub-test 1", func(t *testing.T) {
                            // Do a test.
                        })

                        t.Run("Example sub-test 2", func(t *testing.T) {
                            // Do another test.
                        })

                        t.Run("Example sub-test 3", func(t *testing.T) {
                            // And another...
                        })
                    }
    
    14.2 Testing HTTP handlers and middleware

            Os handlers escritos até agora são complexos de testar e por este motivo
            um handler mais simples, chamado health(), será criado para estudo dos testes.

            Esse handler simplesmente vai retornar 200 para o usuário e uma string "OK" no ResponseBody.

        Recording responses

            O Go fornece um pacote chamado net/http/httptest para auxiliar nos testes de handlers.
            O tipo httptest.ResponseRecorder implementa a interface http.ResponseWriter e armazena
            o StatusCode, Headers e ResponseBody ao invés de escreve-los na conexão HTTP.

            Criar um objeto httptest.ResponseRecorder usando httptest.NewRecorder() e fornece-lo para o handler health()
            como primeiro parâmetro.

            When called, t.Fatal() will mark the test as failed, log the error, and then completely stop
            execution of the current test (or sub-test).
            You should call t.Fatal() in situations where it doesn’t make sense to continue the current test.

        Testing middleware

            É possível usar o mesmo padrão para testar middlewares.
            Isso será demonstrado através de um teste para o middleware secureHeaders().
            Será verificado que:
                - secureHeaders() definiu todos os headers esperados
                - secureHeaders() chamou corretamente o próximo middleware
            
            Criar o arquivo cmd/web/middleware_test.go.

    14.3 End-to-end testing

        Entender como executar testes end-to-end.
        Este tipo de teste abrange o roteamento, handlers e middlewares.
        O teste end-to-end dá mais confiabilidade a aplicação em relação aos testes unitários.

        Criar um novo teste TestHealthHandlerEE() em handlers_test.go.
        O teste vai garantir que qualquer GET em /health realmente invoca o handler health().

        Using httptest.Server

            O ponto principal dos testes end-to-end é usar httptest.NewTLSServer() para iniciar
            um http test server(httptest.Server) e receber requisições.

        Detalhes a respeito do teste TestHealthHandlerEE().
            - O handler fornecido na chamada a httptest.NewTLSServer() é invocado
                toda vez que o servidor receber uma requisição HTTP.
                No teste TestHealthHandlerEE(), ohandler fornecido foi o retorno de app.routes()
                significando que o teste usará as rotas, middlewares e handlers reais da aplicação.
            - Para testar HTTP ao invés de HTTPS, deve-se usar httptest.NewServer().
            - O ts.Client() retorna um client do test server, do tipo http.Client.
                Esse client deve ser usado para realizar requisições.
            - Apenas errorLog e infoLog foram definidos mo mock de app.
                Isso acontece porque os loggers são necessarios nos middlewares logRequest e recoverPanic
                e esses middlewares são usados em todas as rotas.
            
        Using test helpers

            Não existem regras rígidas sobre onde colocar helper methods para testes.
            Se o helper for usado apenas em um arquivo *_test.go específico, provavelmente fará sentido incluí-lo inline nesse arquivo.
            Se for usar um helper em testes de vários pacotes, talvez deva colocá-lo em um pacote reutilizável internal/testutils.

            Criar o arquivo cmd/web/testutils_test.go.

        Cookies and redirections

            Até agora o test server client foi usado com as configurações default.
            Serão feitas alterações nas configurações do test server client para que ele se encaixe melhor nos testes da aplicação.

                - O client deve armazenar qualquer cookie enviado na resposta HTTP.
                    Este cookie poderá ser incluído em requisições subsequentes, isso ajudara no teste de rotas com preoteção CSRF.
                - Não é desejável que o test server client siga os redirects automaticamente.
                    Em certas situações será preciso obter a primeira resposta HTTP enviada pelo servidor.
            
            Fazer essas alterações em testutils_test.go.
    
    14.4 Customizing how tests run

        Controlling which tests are run
            
            O comando abaixo executa os testes de um package específico.
                go test ./cmd/web
            
            É possível executar os tests de todos os package do projeto.
                go test ./...
            
            Também dá para executar testes que deem match com a regex passada em -run.
                go test -v -run="^TestPing$" ./cmd/web/
            
            É possível limitar mais ainda e executar um sub-test específico.
                go test -v -run="^TestHumanDate$/^UTC$" ./cmd/web
        
        Test caching
            Se executar o mesmo teste duas vezes seguidas, a segunda execução exibe os dados cacheados.
            Para forçar uma execução total sem usar cache, use o comando abaixo:
                go test -count=1 ./cmd/web 
        
        Fast failure
            Sabendo que qualquer t.Errorf() dentro dos testes fará com que apenas aquele teste pare.
            É possível fazer com que o go interrompa a execução de testes se acontecer t.Errorf().
                go test -failfast ./cmd/web
            Este comando só interrompe os testes do pacote que lançou a falha(t.Errorf()).
    
    14.5 Mocking dependencies

            Escrever testes para o handler snippetView e rota GET /snippet/view/:id.
            Neste projeto varias dependencias foram inseridas na struct application em main.go.
            Durante os testes, faz sentido mockar algumas destas dependencias.

                type application struct {
                    errorLog       *log.Logger
                    infoLog        *log.Logger
                    snippets       *models.SnippetModel
                    users          *models.UserModel
                    templateCache  map[string]*template.Template
                    formDecoder    *form.Decoder
                    sessionManager *scs.SessionManager
                }
            
            No capitulo anterior errorLog e infoLog foram mockados e passaram a escrever as saídas em
            io.Discard ao invés de os.Stdout ou os.Stderr.
            O io.Discard foi usado para não deixar a saída dos testes poluída.

                func newTestApplication(t *testing.T) *application {
                    return &application{
                        errorLog: log.New(io.Discard, "", 0),
                        infoLog:  log.New(io.Discard, "", 0),
                    }
                }
            
            O models.SnippetModel e models.UserModel também serão mockados para que seja possível testar
            o comportamendo do handler snippetView sem precisar instanciar uma instancia de teste do MySQL.

        Mocking the database models

            Criar um novo pacote internal/models/mocks com os arquivo snippets.go and user.go que serão
            usados para armazenar os mocks do database model.

        Initializing the mocks

            Atualizar a função newTestApplication() de testutils_test.go para que crie a application com todos os mocks.

                func newTestApplication(t *testing.T) *application {
                    templateCache, err := newTemplateCache()
                    if err != nil { t.Fatal(err) }

                    formDecoder := form.NewDecoder()

                    sessionManager := scs.New()
                    sessionManager.Lifetime = 12 * time.Hour
                    sessionManager.Cookie.Secure = true

                    return &application{
                        errorLog:       log.New(io.Discard, "", 0),
                        infoLog:        log.New(io.Discard, "", 0),
                        snippets:       &mocks.SnippetModel{}, // Use the mock.
                        users:          &mocks.UserModel{},    // Use the mock.
                        templateCache:  templateCache,
                        formDecoder:    formDecoder,
                        sessionManager: sessionManager,
                    }
                }

            Neste ponto, a aplicação acusará erro de compilação porque
                - snippets espera models.SnippetModel e recebe mocks.SnippetModel
                - users espera models.UserModel e recebe mocks.UserModel

            A maneira idiomatica de resolver isso é criando uma inteface que seja satisfeita
            por user/snippet mock e user/snippet de produção.

            Criar a interface SnippetModelInterface em internal/models/snippets.go que descreva os métodos
            que a struct SnippetModel possui.

                type SnippetModelInterface interface {
                    Insert(title string, content string, expires int) (int, error)
                    Get(id int) (*Snippet, error)
                    Latest() ([]*Snippet, error)
                }
            
            Fazer o mesmo para UserModel.

                type UserModelInterface interface {
                    Insert(name, email, password string) error
                    Authenticate(email, password string) (int, error)
                    Exists(id int) (bool, error)
                }
            
            Atualizar a struct application para que receba as interfaces ao invés do objeto concreto.

                // ANTES
                    type application struct {
                        snippets    *models.SnippetModel
                        users       *models.UserModel
                    }

                    SnippetModel
                        func (m *SnippetModel) Insert(title string, content string, expires int) (int, error) {}
                        func (m *SnippetModel) Get(id int) (*Snippet, error) {}
                        func (m *SnippetModel) Latest() ([]*Snippet, error) {}

                    UserModel
                        func (m *UserModel) Insert(name, email, password string) error {}
                        func (m *UserModel) Authenticate(email, password string) (int, error) {}
                        func (m *UserModel) Exists(id int) (bool, error) {}

                // DEPOIS
                    type application struct {
                        snippets    models.SnippetModelInterface
                        users       models.UserModelInterface
                    }

                    type SnippetModelInterface interface {
                        Insert(title string, content string, expires int) (int, error)
                        Get(id int) (*Snippet, error)
                        Latest() ([]*Snippet, error)
                    }

                    SnippetModel
                        func (m *SnippetModel) Insert(title string, content string, expires int) (int, error) {}
                        func (m *SnippetModel) Get(id int) (*Snippet, error) {}
                        func (m *SnippetModel) Latest() ([]*Snippet, error) {}

                    type UserModelInterface interface {
                        Insert(name, email, password string) error
                        Authenticate(email, password string) (int, error)
                        Exists(id int) (bool, error)
                    }

                    UserModel
                        func (m *UserModel) Insert(name, email, password string) error {}
                        func (m *UserModel) Authenticate(email, password string) (int, error) {}
                        func (m *UserModel) Exists(id int) (bool, error) {}
        
        Testing the snippetView handler

            Com o setup de mocks pronto é possível escrever testes end-to-end para o snippetView handler.
            
            Como parte deste teste, o código do handler snippetView irá chamar o método mock.SnippetModel.Get().
            Isso acontece porque o campo snippets de application aceita uma interface do tipo SnippetModelInterface.
            Essa interface é implementada por mocks.UserModel e models.UserModel e isto significa que, ambas structs
            podem ser atribuidas ao campo snippets de application.
            A "instância" de application usada no teste é criada em testutils_test.go e recebe mocks.SnippetModel
            no campo snippets e, seguindo a mesma lógica, mocks.UserModel é atribuido ao campo users.

            main.go
                type application struct {
                    errorLog       *log.Logger
                    infoLog        *log.Logger
                    snippets       models.SnippetModelInterface
                    users          models.UserModelInterface
                    templateCache  map[string]*template.Template
                    formDecoder    *form.Decoder
                    sessionManager *scs.SessionManager
                }

            testutils_test.go -> newTestApplication()
            	return &application{
                    errorLog:       log.New(io.Discard, "", 0),
                    infoLog:        log.New(io.Discard, "", 0),
                    snippets:       &mocks.SnippetModel{}, // Use the mock
                    users:          &mocks.UserModel{},    // Use the mock
                    templateCache:  templateCache,
                    formDecoder:    formDecoder,
                    sessionManager: sessionManager,
                }
            
            Vale lembrar que os retornos de mocks.Snippet.Get() são:
                
                func (m *SnippetModel) Get(id int) (*models.Snippet, error) {
                    switch id {
                    case 1:
                        return mockSnippet, nil
                    default:
                        return nil, models.ErrNoRecord
                    }
                }
            
            O objetivo deste teste é
                - para requisição GET /snippet/view/1 o resultado deve ser 200 com o devido snippet mockado no ResponseBody
                - para requisição GET /snippet/view/* o resultado deve ser 404 Not Found
            
            Criar uma função chamada StringContains() em internal/assert e usa-la para verificar se o RequestBody contém um valor especifico.

                func StringContains(t *testing.T, actual, expectedSubstring string) {
                    t.Helper()

                    if !strings.Contains(actual, expectedSubstring) {
                        t.Errorf("got: %q; expected to contain: %q", actual, expectedSubstring)
                    }
                }
            
            Criar o teste em cmd/web/handlers_test.go.
            
    14.6 Testing HTML forms

        Relembrando Capítulo 11.7 CSRF Protection

            Token-based mitigation
                O pacote justinas/nosurf usa o padrão 'double-submit cookie' para prevenir ataques CSRF.
                Neste padrão um token CSRF aleatório é gerado e enviado para o usuário no CSRF Cookie.
                O token também é adicionado a um campo oculto em cada formulário vulnerável.
                Quando o formulário é submetido justinas/nosurf verifica se o token CSRF do campo oculto corresponde ao CSRF Cookie.

                cmd/web/middleware.go
                    // Create a NoSurf middleware function which uses a customized CSRF cookie with
                    // the Secure, Path and HttpOnly attributes set.
                    func noSurf(next http.Handler) http.Handler {
                        csrfHandler := nosurf.New(next)
                        csrfHandler.SetBaseCookie(http.Cookie{
                            HttpOnly: true,
                            Path:     "/",
                            Secure:   true,
                        })

                        return csrfHandler
                    }

                cmd/web/routes.go
                    // Use the nosurf middleware on all our 'dynamic' routes.
                    dynamic := alice.New(app.sessionManager.LoadAndSave, noSurf)

                cmd/web/templates.go
                    // Add a CSRFToken field.
                    type templateData struct {
                        CSRFToken       string
                    }

                cmd/web/helpers.go
                    // Add the CSRF token.
                    func (app *application) newTemplateData(r *http.Request) *templateData {
                        return &templateData{
                            CSRFToken:       nosurf.Token(r), 
                        }
                    }

                ui/html/pages/create.tmpl
                    // Include the CSRF token form
                    <form action='/snippet/create' method='POST'>
                        <input type='hidden' name='csrf_token' value='{{.CSRFToken}}'>
                    </form>

                https://reflectoring.io/images/posts/csrf/csrf-token-synchronizer_hu417751a3bd63fc7d73ad84e48fdb0183_39163_639x0_resize_box_3.png

                  Usuário                              Servidor
                    |                                    |
                    |-------- GET /signup -------------->|  (1. Usuário solicita a página de signup)
                    |                                    |
                    |<----------- 200 OK ----------------|  (2. Servidor responde com a página de signup)
                    |                                    |
                    |-------- POST /signup ------------->|  (3. Usuário envia credenciais de signup)
                    |    (username, password)            |
                    |                                    |
                    |<------ Verifica credenciais -------|  (4. Servidor verifica as credenciais)
                    |                                    |
                    |<----------- 200 OK ----------------|  (5. Credenciais válidas, servidor responde)
                    |                                    |
                    |<----- Set-Cookie: sessionID ------>|  (6. Servidor define o cookie de sessão)
                    |<----- Set-Cookie: csrfToken ------>|  (7. Servidor gera e define o cookie CSRF)
                    |                                    | 
                    |                                    |
                    |---- Faz uma requisição POST ------>|  (8. Usuário faz uma nova requisição POST)
                    |    (body contém csrfToken)         |  (   incluindo o token CSRF no corpo)
                    |                                    |
                    |<----- Verifica csrfToken ----------|  (9. Servidor verifica se o token CSRF no corpo)
                    |                                    |  (   da requisição corresponde ao cookie CSRF)
                    |<------------ 200 OK ---------------|  (10. Se o token for válido, o servidor responde)
                    |                                    |

        Criar um teste end-to-end para a rota POST /user/signup que é processada por userSignupPost handler.
        O teste nesta rota é um pouco complicado devido a validação anti-CSRF.
        Qualquer requisição realizada em POST /user/signup vai receber 400 Bad Request se não fornecer um
        token CSRF e cookie CSRF válidos.

        É preciso recriar o workflow da "vida real":

            1 - Relizar um GET /user/signup request.
                Essa rota retornará um CSRF Cookie nos headers e o CSRF Token no response body.

            2 - Extrair o CSRF token do ResponseBody HTML.

            3 - Realizar POST /user/signup usando o mesmo http.Client do primeiro passo, desta forma
                o CSRF Cookie será encaminhado automaticamente.
                Além disso, antes de realizar o POST, é preciso incluir o token CSRF nos dados da requisição.
            

            Relembrando capitulo 14.3 End-to-end testing

                Cookies and redirections

                    Até agora o test server client foi usado com as configurações default.
                    Serão feitas alterações nas configurações do test server client para que ele se
                    encaixe melhor nos testes da aplicação.

                    - O client deve armazenar qualquer cookie recebido na resposta HTTP.
                        Este cookie poderá ser incluído em requisições subsequentes, isso ajudara a testar rotas com preoteção CSRF.
                    - Não é desejável que o test server client siga os redirects automaticamente.
                        Em certas situações será preciso obter a primeira resposta HTTP enviada pelo servidor.
                    
                    Fazer essas alterações em testutils_test.go.
                        https://github.com/RafaelClaumann/snippetbox/pull/11/commits/90554beed62d7275a58f07862e0fa9a81a834a82

        Criar uma nova função chamada extractCSRFToken em cmd/web/testutils_test.go.
        Criar uma nova função chamada postForm em cmd/web/testutils_test.go.
        Criar o teste end-to-end TestUserSignup em handlers_test.go.
